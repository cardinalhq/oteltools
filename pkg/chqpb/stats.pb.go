// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.31.1
// source: stats.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Phase int32

const (
	Phase_PASSTHROUGH        Phase = 0
	Phase_AGGREGATED         Phase = 1
	Phase_AGGREGATION_OUTPUT Phase = 2
	Phase_FILTERED           Phase = 3
	Phase_DRY_RUN_FILTERED   Phase = 4
	Phase_PRE                Phase = 5
	Phase_POST               Phase = 6
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "PASSTHROUGH",
		1: "AGGREGATED",
		2: "AGGREGATION_OUTPUT",
		3: "FILTERED",
		4: "DRY_RUN_FILTERED",
		5: "PRE",
		6: "POST",
	}
	Phase_value = map[string]int32{
		"PASSTHROUGH":        0,
		"AGGREGATED":         1,
		"AGGREGATION_OUTPUT": 2,
		"FILTERED":           3,
		"DRY_RUN_FILTERED":   4,
		"PRE":                5,
		"POST":               6,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[0].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[0]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0}
}

type EventStatsReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubmittedAt   int64                  `protobuf:"varint,1,opt,name=submittedAt,proto3" json:"submittedAt,omitempty"`
	Stats         []*EventStats          `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatsReport) Reset() {
	*x = EventStatsReport{}
	mi := &file_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatsReport) ProtoMessage() {}

func (x *EventStatsReport) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatsReport.ProtoReflect.Descriptor instead.
func (*EventStatsReport) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0}
}

func (x *EventStatsReport) GetSubmittedAt() int64 {
	if x != nil {
		return x.SubmittedAt
	}
	return 0
}

func (x *EventStatsReport) GetStats() []*EventStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type EventStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceName   string                 `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Fingerprint   int64                  `protobuf:"varint,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Phase         Phase                  `protobuf:"varint,3,opt,name=phase,proto3,enum=chqpb.Phase" json:"phase,omitempty"`
	Count         int64                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Size          int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Exemplar      []byte                 `protobuf:"bytes,6,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	ProcessorId   string                 `protobuf:"bytes,7,opt,name=processorId,proto3" json:"processorId,omitempty"`
	Attributes    []*Attribute           `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`
	CollectorId   string                 `protobuf:"bytes,9,opt,name=collectorId,proto3" json:"collectorId,omitempty"`
	CustomerId    string                 `protobuf:"bytes,10,opt,name=customerId,proto3" json:"customerId,omitempty"`
	TsHour        int64                  `protobuf:"varint,11,opt,name=tsHour,proto3" json:"tsHour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStats) Reset() {
	*x = EventStats{}
	mi := &file_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStats) ProtoMessage() {}

func (x *EventStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStats.ProtoReflect.Descriptor instead.
func (*EventStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{1}
}

func (x *EventStats) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *EventStats) GetFingerprint() int64 {
	if x != nil {
		return x.Fingerprint
	}
	return 0
}

func (x *EventStats) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PASSTHROUGH
}

func (x *EventStats) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EventStats) GetExemplar() []byte {
	if x != nil {
		return x.Exemplar
	}
	return nil
}

func (x *EventStats) GetProcessorId() string {
	if x != nil {
		return x.ProcessorId
	}
	return ""
}

func (x *EventStats) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EventStats) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *EventStats) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *EventStats) GetTsHour() int64 {
	if x != nil {
		return x.TsHour
	}
	return 0
}

type MetricExemplar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetricName    string                 `protobuf:"bytes,1,opt,name=metricName,proto3" json:"metricName,omitempty"`
	ServiceName   string                 `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	MetricType    string                 `protobuf:"bytes,3,opt,name=metricType,proto3" json:"metricType,omitempty"`
	Exemplar      []byte                 `protobuf:"bytes,4,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	ProcessorId   string                 `protobuf:"bytes,5,opt,name=processorId,proto3" json:"processorId,omitempty"`
	CustomerId    string                 `protobuf:"bytes,6,opt,name=customerId,proto3" json:"customerId,omitempty"`
	CollectorId   string                 `protobuf:"bytes,7,opt,name=collectorId,proto3" json:"collectorId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricExemplar) Reset() {
	*x = MetricExemplar{}
	mi := &file_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricExemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricExemplar) ProtoMessage() {}

func (x *MetricExemplar) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricExemplar.ProtoReflect.Descriptor instead.
func (*MetricExemplar) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{2}
}

func (x *MetricExemplar) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricExemplar) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricExemplar) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *MetricExemplar) GetExemplar() []byte {
	if x != nil {
		return x.Exemplar
	}
	return nil
}

func (x *MetricExemplar) GetProcessorId() string {
	if x != nil {
		return x.ProcessorId
	}
	return ""
}

func (x *MetricExemplar) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetricExemplar) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

type MetricStatsReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubmittedAt   int64                  `protobuf:"varint,1,opt,name=submittedAt,proto3" json:"submittedAt,omitempty"`
	Stats         []*MetricStats         `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
	Exemplars     []*MetricExemplar      `protobuf:"bytes,3,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricStatsReport) Reset() {
	*x = MetricStatsReport{}
	mi := &file_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricStatsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatsReport) ProtoMessage() {}

func (x *MetricStatsReport) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatsReport.ProtoReflect.Descriptor instead.
func (*MetricStatsReport) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{3}
}

func (x *MetricStatsReport) GetSubmittedAt() int64 {
	if x != nil {
		return x.SubmittedAt
	}
	return 0
}

func (x *MetricStatsReport) GetStats() []*MetricStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *MetricStatsReport) GetExemplars() []*MetricExemplar {
	if x != nil {
		return x.Exemplars
	}
	return nil
}

type MetricStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MetricName          string                 `protobuf:"bytes,1,opt,name=metricName,proto3" json:"metricName,omitempty"`
	ServiceName         string                 `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	TagName             string                 `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
	Phase               Phase                  `protobuf:"varint,4,opt,name=phase,proto3,enum=chqpb.Phase" json:"phase,omitempty"`
	CardinalityEstimate float64                `protobuf:"fixed64,5,opt,name=cardinalityEstimate,proto3" json:"cardinalityEstimate,omitempty"`
	Hll                 []byte                 `protobuf:"bytes,6,opt,name=hll,proto3" json:"hll,omitempty"`
	Count               int64                  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	ProcessorId         string                 `protobuf:"bytes,8,opt,name=processorId,proto3" json:"processorId,omitempty"`
	Attributes          []*Attribute           `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	TagScope            string                 `protobuf:"bytes,10,opt,name=tagScope,proto3" json:"tagScope,omitempty"`
	MetricType          string                 `protobuf:"bytes,11,opt,name=metricType,proto3" json:"metricType,omitempty"`
	CollectorId         string                 `protobuf:"bytes,12,opt,name=collectorId,proto3" json:"collectorId,omitempty"`
	CustomerId          string                 `protobuf:"bytes,13,opt,name=customerId,proto3" json:"customerId,omitempty"`
	TsHour              int64                  `protobuf:"varint,14,opt,name=tsHour,proto3" json:"tsHour,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MetricStats) Reset() {
	*x = MetricStats{}
	mi := &file_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStats) ProtoMessage() {}

func (x *MetricStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStats.ProtoReflect.Descriptor instead.
func (*MetricStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{4}
}

func (x *MetricStats) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricStats) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricStats) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MetricStats) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PASSTHROUGH
}

func (x *MetricStats) GetCardinalityEstimate() float64 {
	if x != nil {
		return x.CardinalityEstimate
	}
	return 0
}

func (x *MetricStats) GetHll() []byte {
	if x != nil {
		return x.Hll
	}
	return nil
}

func (x *MetricStats) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricStats) GetProcessorId() string {
	if x != nil {
		return x.ProcessorId
	}
	return ""
}

func (x *MetricStats) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MetricStats) GetTagScope() string {
	if x != nil {
		return x.TagScope
	}
	return ""
}

func (x *MetricStats) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *MetricStats) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *MetricStats) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetricStats) GetTsHour() int64 {
	if x != nil {
		return x.TsHour
	}
	return 0
}

var File_stats_proto protoreflect.FileDescriptor

const file_stats_proto_rawDesc = "" +
	"\n" +
	"\vstats.proto\x12\x05chqpb\x1a\x0fattribute.proto\"]\n" +
	"\x10EventStatsReport\x12 \n" +
	"\vsubmittedAt\x18\x01 \x01(\x03R\vsubmittedAt\x12'\n" +
	"\x05stats\x18\x02 \x03(\v2\x11.chqpb.EventStatsR\x05stats\"\xe8\x02\n" +
	"\n" +
	"EventStats\x12 \n" +
	"\vserviceName\x18\x01 \x01(\tR\vserviceName\x12 \n" +
	"\vfingerprint\x18\x02 \x01(\x03R\vfingerprint\x12\"\n" +
	"\x05phase\x18\x03 \x01(\x0e2\f.chqpb.PhaseR\x05phase\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x03R\x05count\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x03R\x04size\x12\x1a\n" +
	"\bexemplar\x18\x06 \x01(\fR\bexemplar\x12 \n" +
	"\vprocessorId\x18\a \x01(\tR\vprocessorId\x120\n" +
	"\n" +
	"attributes\x18\b \x03(\v2\x10.chqpb.AttributeR\n" +
	"attributes\x12 \n" +
	"\vcollectorId\x18\t \x01(\tR\vcollectorId\x12\x1e\n" +
	"\n" +
	"customerId\x18\n" +
	" \x01(\tR\n" +
	"customerId\x12\x16\n" +
	"\x06tsHour\x18\v \x01(\x03R\x06tsHour\"\xf2\x01\n" +
	"\x0eMetricExemplar\x12\x1e\n" +
	"\n" +
	"metricName\x18\x01 \x01(\tR\n" +
	"metricName\x12 \n" +
	"\vserviceName\x18\x02 \x01(\tR\vserviceName\x12\x1e\n" +
	"\n" +
	"metricType\x18\x03 \x01(\tR\n" +
	"metricType\x12\x1a\n" +
	"\bexemplar\x18\x04 \x01(\fR\bexemplar\x12 \n" +
	"\vprocessorId\x18\x05 \x01(\tR\vprocessorId\x12\x1e\n" +
	"\n" +
	"customerId\x18\x06 \x01(\tR\n" +
	"customerId\x12 \n" +
	"\vcollectorId\x18\a \x01(\tR\vcollectorId\"\x94\x01\n" +
	"\x11MetricStatsReport\x12 \n" +
	"\vsubmittedAt\x18\x01 \x01(\x03R\vsubmittedAt\x12(\n" +
	"\x05stats\x18\x02 \x03(\v2\x12.chqpb.MetricStatsR\x05stats\x123\n" +
	"\texemplars\x18\x03 \x03(\v2\x15.chqpb.MetricExemplarR\texemplars\"\xd1\x03\n" +
	"\vMetricStats\x12\x1e\n" +
	"\n" +
	"metricName\x18\x01 \x01(\tR\n" +
	"metricName\x12 \n" +
	"\vserviceName\x18\x02 \x01(\tR\vserviceName\x12\x18\n" +
	"\atagName\x18\x03 \x01(\tR\atagName\x12\"\n" +
	"\x05phase\x18\x04 \x01(\x0e2\f.chqpb.PhaseR\x05phase\x120\n" +
	"\x13cardinalityEstimate\x18\x05 \x01(\x01R\x13cardinalityEstimate\x12\x10\n" +
	"\x03hll\x18\x06 \x01(\fR\x03hll\x12\x14\n" +
	"\x05count\x18\a \x01(\x03R\x05count\x12 \n" +
	"\vprocessorId\x18\b \x01(\tR\vprocessorId\x120\n" +
	"\n" +
	"attributes\x18\t \x03(\v2\x10.chqpb.AttributeR\n" +
	"attributes\x12\x1a\n" +
	"\btagScope\x18\n" +
	" \x01(\tR\btagScope\x12\x1e\n" +
	"\n" +
	"metricType\x18\v \x01(\tR\n" +
	"metricType\x12 \n" +
	"\vcollectorId\x18\f \x01(\tR\vcollectorId\x12\x1e\n" +
	"\n" +
	"customerId\x18\r \x01(\tR\n" +
	"customerId\x12\x16\n" +
	"\x06tsHour\x18\x0e \x01(\x03R\x06tsHour*w\n" +
	"\x05Phase\x12\x0f\n" +
	"\vPASSTHROUGH\x10\x00\x12\x0e\n" +
	"\n" +
	"AGGREGATED\x10\x01\x12\x16\n" +
	"\x12AGGREGATION_OUTPUT\x10\x02\x12\f\n" +
	"\bFILTERED\x10\x03\x12\x14\n" +
	"\x10DRY_RUN_FILTERED\x10\x04\x12\a\n" +
	"\x03PRE\x10\x05\x12\b\n" +
	"\x04POST\x10\x06B\tZ\a.;chqpbb\x06proto3"

var (
	file_stats_proto_rawDescOnce sync.Once
	file_stats_proto_rawDescData []byte
)

func file_stats_proto_rawDescGZIP() []byte {
	file_stats_proto_rawDescOnce.Do(func() {
		file_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stats_proto_rawDesc), len(file_stats_proto_rawDesc)))
	})
	return file_stats_proto_rawDescData
}

var file_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_stats_proto_goTypes = []any{
	(Phase)(0),                // 0: chqpb.Phase
	(*EventStatsReport)(nil),  // 1: chqpb.EventStatsReport
	(*EventStats)(nil),        // 2: chqpb.EventStats
	(*MetricExemplar)(nil),    // 3: chqpb.MetricExemplar
	(*MetricStatsReport)(nil), // 4: chqpb.MetricStatsReport
	(*MetricStats)(nil),       // 5: chqpb.MetricStats
	(*Attribute)(nil),         // 6: chqpb.Attribute
}
var file_stats_proto_depIdxs = []int32{
	2, // 0: chqpb.EventStatsReport.stats:type_name -> chqpb.EventStats
	0, // 1: chqpb.EventStats.phase:type_name -> chqpb.Phase
	6, // 2: chqpb.EventStats.attributes:type_name -> chqpb.Attribute
	5, // 3: chqpb.MetricStatsReport.stats:type_name -> chqpb.MetricStats
	3, // 4: chqpb.MetricStatsReport.exemplars:type_name -> chqpb.MetricExemplar
	0, // 5: chqpb.MetricStats.phase:type_name -> chqpb.Phase
	6, // 6: chqpb.MetricStats.attributes:type_name -> chqpb.Attribute
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_stats_proto_init() }
func file_stats_proto_init() {
	if File_stats_proto != nil {
		return
	}
	file_attribute_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stats_proto_rawDesc), len(file_stats_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stats_proto_goTypes,
		DependencyIndexes: file_stats_proto_depIdxs,
		EnumInfos:         file_stats_proto_enumTypes,
		MessageInfos:      file_stats_proto_msgTypes,
	}.Build()
	File_stats_proto = out.File
	file_stats_proto_goTypes = nil
	file_stats_proto_depIdxs = nil
}
