// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: genericsketch.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_UP   Direction = 0
	Direction_DOWN Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	Direction_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_genericsketch_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_genericsketch_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_genericsketch_proto_rawDescGZIP(), []int{0}
}

// A single span sketch for a metric and timeseries
type GenericSketchProto struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	MetricName string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	MetricType string                 `protobuf:"bytes,2,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	Tid        int64                  `protobuf:"varint,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Interval   int64                  `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// Map of tag key to tag value
	Tags          map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sketch        []byte            `protobuf:"bytes,6,opt,name=sketch,proto3" json:"sketch,omitempty"`
	ParentTID     int64             `protobuf:"varint,7,opt,name=parentTID,proto3" json:"parentTID,omitempty"`
	TagFamilyId   int64             `protobuf:"varint,8,opt,name=tagFamilyId,proto3" json:"tagFamilyId,omitempty"`
	Direction     Direction         `protobuf:"varint,9,opt,name=direction,proto3,enum=chqpb.Direction" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericSketchProto) Reset() {
	*x = GenericSketchProto{}
	mi := &file_genericsketch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericSketchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericSketchProto) ProtoMessage() {}

func (x *GenericSketchProto) ProtoReflect() protoreflect.Message {
	mi := &file_genericsketch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericSketchProto.ProtoReflect.Descriptor instead.
func (*GenericSketchProto) Descriptor() ([]byte, []int) {
	return file_genericsketch_proto_rawDescGZIP(), []int{0}
}

func (x *GenericSketchProto) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *GenericSketchProto) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *GenericSketchProto) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *GenericSketchProto) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *GenericSketchProto) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GenericSketchProto) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *GenericSketchProto) GetParentTID() int64 {
	if x != nil {
		return x.ParentTID
	}
	return 0
}

func (x *GenericSketchProto) GetTagFamilyId() int64 {
	if x != nil {
		return x.TagFamilyId
	}
	return 0
}

func (x *GenericSketchProto) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_UP
}

// Wrapper for a list of span sketches to emit in a single batch
type GenericSketchList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketches      []*GenericSketchProto  `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches,omitempty"`
	CustomerId    string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	TelemetryType string                 `protobuf:"bytes,3,opt,name=telemetryType,proto3" json:"telemetryType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericSketchList) Reset() {
	*x = GenericSketchList{}
	mi := &file_genericsketch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericSketchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericSketchList) ProtoMessage() {}

func (x *GenericSketchList) ProtoReflect() protoreflect.Message {
	mi := &file_genericsketch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericSketchList.ProtoReflect.Descriptor instead.
func (*GenericSketchList) Descriptor() ([]byte, []int) {
	return file_genericsketch_proto_rawDescGZIP(), []int{1}
}

func (x *GenericSketchList) GetSketches() []*GenericSketchProto {
	if x != nil {
		return x.Sketches
	}
	return nil
}

func (x *GenericSketchList) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenericSketchList) GetTelemetryType() string {
	if x != nil {
		return x.TelemetryType
	}
	return ""
}

var File_genericsketch_proto protoreflect.FileDescriptor

const file_genericsketch_proto_rawDesc = "" +
	"\n" +
	"\x13genericsketch.proto\x12\x05chqpb\"\xfe\x02\n" +
	"\x12GenericSketchProto\x12\x1f\n" +
	"\vmetric_name\x18\x01 \x01(\tR\n" +
	"metricName\x12\x1f\n" +
	"\vmetric_type\x18\x02 \x01(\tR\n" +
	"metricType\x12\x10\n" +
	"\x03tid\x18\x03 \x01(\x03R\x03tid\x12\x1a\n" +
	"\binterval\x18\x04 \x01(\x03R\binterval\x127\n" +
	"\x04tags\x18\x05 \x03(\v2#.chqpb.GenericSketchProto.TagsEntryR\x04tags\x12\x16\n" +
	"\x06sketch\x18\x06 \x01(\fR\x06sketch\x12\x1c\n" +
	"\tparentTID\x18\a \x01(\x03R\tparentTID\x12 \n" +
	"\vtagFamilyId\x18\b \x01(\x03R\vtagFamilyId\x12.\n" +
	"\tdirection\x18\t \x01(\x0e2\x10.chqpb.DirectionR\tdirection\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x91\x01\n" +
	"\x11GenericSketchList\x125\n" +
	"\bsketches\x18\x01 \x03(\v2\x19.chqpb.GenericSketchProtoR\bsketches\x12\x1f\n" +
	"\vcustomer_id\x18\x02 \x01(\tR\n" +
	"customerId\x12$\n" +
	"\rtelemetryType\x18\x03 \x01(\tR\rtelemetryType*\x1d\n" +
	"\tDirection\x12\x06\n" +
	"\x02UP\x10\x00\x12\b\n" +
	"\x04DOWN\x10\x01B\tZ\a.;chqpbb\x06proto3"

var (
	file_genericsketch_proto_rawDescOnce sync.Once
	file_genericsketch_proto_rawDescData []byte
)

func file_genericsketch_proto_rawDescGZIP() []byte {
	file_genericsketch_proto_rawDescOnce.Do(func() {
		file_genericsketch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_genericsketch_proto_rawDesc), len(file_genericsketch_proto_rawDesc)))
	})
	return file_genericsketch_proto_rawDescData
}

var file_genericsketch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_genericsketch_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_genericsketch_proto_goTypes = []any{
	(Direction)(0),             // 0: chqpb.Direction
	(*GenericSketchProto)(nil), // 1: chqpb.GenericSketchProto
	(*GenericSketchList)(nil),  // 2: chqpb.GenericSketchList
	nil,                        // 3: chqpb.GenericSketchProto.TagsEntry
}
var file_genericsketch_proto_depIdxs = []int32{
	3, // 0: chqpb.GenericSketchProto.tags:type_name -> chqpb.GenericSketchProto.TagsEntry
	0, // 1: chqpb.GenericSketchProto.direction:type_name -> chqpb.Direction
	1, // 2: chqpb.GenericSketchList.sketches:type_name -> chqpb.GenericSketchProto
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_genericsketch_proto_init() }
func file_genericsketch_proto_init() {
	if File_genericsketch_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_genericsketch_proto_rawDesc), len(file_genericsketch_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_genericsketch_proto_goTypes,
		DependencyIndexes: file_genericsketch_proto_depIdxs,
		EnumInfos:         file_genericsketch_proto_enumTypes,
		MessageInfos:      file_genericsketch_proto_msgTypes,
	}.Build()
	File_genericsketch_proto = out.File
	file_genericsketch_proto_goTypes = nil
	file_genericsketch_proto_depIdxs = nil
}
