// Copyright 2024 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: metric_ingest_stats.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricIngestStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HllSketch []byte                `protobuf:"bytes,1,opt,name=hllSketch,proto3" json:"hllSketch,omitempty"`
	Key       *MetricIngestStat_Key `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MetricIngestStat) Reset() {
	*x = MetricIngestStat{}
	mi := &file_metric_ingest_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricIngestStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIngestStat) ProtoMessage() {}

func (x *MetricIngestStat) ProtoReflect() protoreflect.Message {
	mi := &file_metric_ingest_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIngestStat.ProtoReflect.Descriptor instead.
func (*MetricIngestStat) Descriptor() ([]byte, []int) {
	return file_metric_ingest_stats_proto_rawDescGZIP(), []int{0}
}

func (x *MetricIngestStat) GetHllSketch() []byte {
	if x != nil {
		return x.HllSketch
	}
	return nil
}

func (x *MetricIngestStat) GetKey() *MetricIngestStat_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

type MetricIngestStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats     []*MetricIngestStat                     `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	Key       *MetricIngestStatsList_Key              `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Exemplars []*MetricIngestStatsList_MetricExemplar `protobuf:"bytes,3,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
}

func (x *MetricIngestStatsList) Reset() {
	*x = MetricIngestStatsList{}
	mi := &file_metric_ingest_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricIngestStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIngestStatsList) ProtoMessage() {}

func (x *MetricIngestStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_metric_ingest_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIngestStatsList.ProtoReflect.Descriptor instead.
func (*MetricIngestStatsList) Descriptor() ([]byte, []int) {
	return file_metric_ingest_stats_proto_rawDescGZIP(), []int{1}
}

func (x *MetricIngestStatsList) GetStats() []*MetricIngestStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *MetricIngestStatsList) GetKey() *MetricIngestStatsList_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MetricIngestStatsList) GetExemplars() []*MetricIngestStatsList_MetricExemplar {
	if x != nil {
		return x.Exemplars
	}
	return nil
}

type MetricIngestStat_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service     string       `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	MetricName  string       `protobuf:"bytes,2,opt,name=metricName,proto3" json:"metricName,omitempty"`
	TagName     string       `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`
	TsHour      int64        `protobuf:"varint,4,opt,name=tsHour,proto3" json:"tsHour,omitempty"`
	CustomerId  string       `protobuf:"bytes,5,opt,name=customerId,proto3" json:"customerId,omitempty"`
	PhaseType   string       `protobuf:"bytes,6,opt,name=phaseType,proto3" json:"phaseType,omitempty"`
	ProcessorId string       `protobuf:"bytes,7,opt,name=processorId,proto3" json:"processorId,omitempty"`
	CollectorId string       `protobuf:"bytes,8,opt,name=collectorId,proto3" json:"collectorId,omitempty"`
	Attributes  []*Attribute `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	TagScope    string       `protobuf:"bytes,10,opt,name=tagScope,proto3" json:"tagScope,omitempty"`
	MetricType  string       `protobuf:"bytes,11,opt,name=metricType,proto3" json:"metricType,omitempty"`
}

func (x *MetricIngestStat_Key) Reset() {
	*x = MetricIngestStat_Key{}
	mi := &file_metric_ingest_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricIngestStat_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIngestStat_Key) ProtoMessage() {}

func (x *MetricIngestStat_Key) ProtoReflect() protoreflect.Message {
	mi := &file_metric_ingest_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIngestStat_Key.ProtoReflect.Descriptor instead.
func (*MetricIngestStat_Key) Descriptor() ([]byte, []int) {
	return file_metric_ingest_stats_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MetricIngestStat_Key) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *MetricIngestStat_Key) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricIngestStat_Key) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MetricIngestStat_Key) GetTsHour() int64 {
	if x != nil {
		return x.TsHour
	}
	return 0
}

func (x *MetricIngestStat_Key) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetricIngestStat_Key) GetPhaseType() string {
	if x != nil {
		return x.PhaseType
	}
	return ""
}

func (x *MetricIngestStat_Key) GetProcessorId() string {
	if x != nil {
		return x.ProcessorId
	}
	return ""
}

func (x *MetricIngestStat_Key) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *MetricIngestStat_Key) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MetricIngestStat_Key) GetTagScope() string {
	if x != nil {
		return x.TagScope
	}
	return ""
}

func (x *MetricIngestStat_Key) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

type MetricIngestStatsList_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId  string `protobuf:"bytes,1,opt,name=customerId,proto3" json:"customerId,omitempty"`
	PhaseType   string `protobuf:"bytes,2,opt,name=phaseType,proto3" json:"phaseType,omitempty"`
	TsHour      int64  `protobuf:"varint,3,opt,name=tsHour,proto3" json:"tsHour,omitempty"`
	VendorId    string `protobuf:"bytes,4,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	CollectorId string `protobuf:"bytes,5,opt,name=collectorId,proto3" json:"collectorId,omitempty"`
}

func (x *MetricIngestStatsList_Key) Reset() {
	*x = MetricIngestStatsList_Key{}
	mi := &file_metric_ingest_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricIngestStatsList_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIngestStatsList_Key) ProtoMessage() {}

func (x *MetricIngestStatsList_Key) ProtoReflect() protoreflect.Message {
	mi := &file_metric_ingest_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIngestStatsList_Key.ProtoReflect.Descriptor instead.
func (*MetricIngestStatsList_Key) Descriptor() ([]byte, []int) {
	return file_metric_ingest_stats_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MetricIngestStatsList_Key) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetricIngestStatsList_Key) GetPhaseType() string {
	if x != nil {
		return x.PhaseType
	}
	return ""
}

func (x *MetricIngestStatsList_Key) GetTsHour() int64 {
	if x != nil {
		return x.TsHour
	}
	return 0
}

func (x *MetricIngestStatsList_Key) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *MetricIngestStatsList_Key) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

type MetricIngestStatsList_MetricExemplar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string `protobuf:"bytes,1,opt,name=metricName,proto3" json:"metricName,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	MetricType  string `protobuf:"bytes,3,opt,name=metricType,proto3" json:"metricType,omitempty"`
	Exemplar    []byte `protobuf:"bytes,4,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
}

func (x *MetricIngestStatsList_MetricExemplar) Reset() {
	*x = MetricIngestStatsList_MetricExemplar{}
	mi := &file_metric_ingest_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricIngestStatsList_MetricExemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIngestStatsList_MetricExemplar) ProtoMessage() {}

func (x *MetricIngestStatsList_MetricExemplar) ProtoReflect() protoreflect.Message {
	mi := &file_metric_ingest_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIngestStatsList_MetricExemplar.ProtoReflect.Descriptor instead.
func (*MetricIngestStatsList_MetricExemplar) Descriptor() ([]byte, []int) {
	return file_metric_ingest_stats_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MetricIngestStatsList_MetricExemplar) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricIngestStatsList_MetricExemplar) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MetricIngestStatsList_MetricExemplar) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *MetricIngestStatsList_MetricExemplar) GetExemplar() []byte {
	if x != nil {
		return x.Exemplar
	}
	return nil
}

var File_metric_ingest_stats_proto protoreflect.FileDescriptor

var file_metric_ingest_stats_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x68, 0x71,
	0x70, 0x62, 0x1a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6c, 0x6c, 0x53,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x6c, 0x6c,
	0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x71, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0xe1, 0x02, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x68, 0x71, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x03, 0x0a, 0x15, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x71, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x71, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x71, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x52, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x73, 0x1a, 0x99, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x8e, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x63, 0x68, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_metric_ingest_stats_proto_rawDescOnce sync.Once
	file_metric_ingest_stats_proto_rawDescData = file_metric_ingest_stats_proto_rawDesc
)

func file_metric_ingest_stats_proto_rawDescGZIP() []byte {
	file_metric_ingest_stats_proto_rawDescOnce.Do(func() {
		file_metric_ingest_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_metric_ingest_stats_proto_rawDescData)
	})
	return file_metric_ingest_stats_proto_rawDescData
}

var file_metric_ingest_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_metric_ingest_stats_proto_goTypes = []any{
	(*MetricIngestStat)(nil),                     // 0: chqpb.MetricIngestStat
	(*MetricIngestStatsList)(nil),                // 1: chqpb.MetricIngestStatsList
	(*MetricIngestStat_Key)(nil),                 // 2: chqpb.MetricIngestStat.Key
	(*MetricIngestStatsList_Key)(nil),            // 3: chqpb.MetricIngestStatsList.Key
	(*MetricIngestStatsList_MetricExemplar)(nil), // 4: chqpb.MetricIngestStatsList.MetricExemplar
	(*Attribute)(nil),                            // 5: chqpb.Attribute
}
var file_metric_ingest_stats_proto_depIdxs = []int32{
	2, // 0: chqpb.MetricIngestStat.key:type_name -> chqpb.MetricIngestStat.Key
	0, // 1: chqpb.MetricIngestStatsList.stats:type_name -> chqpb.MetricIngestStat
	3, // 2: chqpb.MetricIngestStatsList.key:type_name -> chqpb.MetricIngestStatsList.Key
	4, // 3: chqpb.MetricIngestStatsList.exemplars:type_name -> chqpb.MetricIngestStatsList.MetricExemplar
	5, // 4: chqpb.MetricIngestStat.Key.attributes:type_name -> chqpb.Attribute
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_metric_ingest_stats_proto_init() }
func file_metric_ingest_stats_proto_init() {
	if File_metric_ingest_stats_proto != nil {
		return
	}
	file_attribute_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metric_ingest_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metric_ingest_stats_proto_goTypes,
		DependencyIndexes: file_metric_ingest_stats_proto_depIdxs,
		MessageInfos:      file_metric_ingest_stats_proto_msgTypes,
	}.Build()
	File_metric_ingest_stats_proto = out.File
	file_metric_ingest_stats_proto_rawDesc = nil
	file_metric_ingest_stats_proto_goTypes = nil
	file_metric_ingest_stats_proto_depIdxs = nil
}
