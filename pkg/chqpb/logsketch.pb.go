// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: logsketch.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A single log sketch for a TID (service + cluster + namespace) and interval
type LogSketchProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceName   string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	NamespaceName string                 `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ClusterName   string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Tid           string                 `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	Interval      int64                  `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	// Total number of log records in this interval
	TotalCount int64 `protobuf:"varint,6,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Number of logs with severity >= WARN
	ErrorCount int64 `protobuf:"varint,7,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// Number of logs that were considered exceptions
	ExceptionCount int64 `protobuf:"varint,8,opt,name=exception_count,json=exceptionCount,proto3" json:"exception_count,omitempty"`
	// fingerprint -> example log (JSON string)
	ExceptionMap map[int64]string `protobuf:"bytes,9,rep,name=exception_map,json=exceptionMap,proto3" json:"exception_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// fingerprint -> count of how many times it occurred
	ExceptionCounts map[int64]int64 `protobuf:"bytes,10,rep,name=exception_counts,json=exceptionCounts,proto3" json:"exception_counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LogSketchProto) Reset() {
	*x = LogSketchProto{}
	mi := &file_logsketch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogSketchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSketchProto) ProtoMessage() {}

func (x *LogSketchProto) ProtoReflect() protoreflect.Message {
	mi := &file_logsketch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSketchProto.ProtoReflect.Descriptor instead.
func (*LogSketchProto) Descriptor() ([]byte, []int) {
	return file_logsketch_proto_rawDescGZIP(), []int{0}
}

func (x *LogSketchProto) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *LogSketchProto) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *LogSketchProto) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *LogSketchProto) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *LogSketchProto) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *LogSketchProto) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *LogSketchProto) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *LogSketchProto) GetExceptionCount() int64 {
	if x != nil {
		return x.ExceptionCount
	}
	return 0
}

func (x *LogSketchProto) GetExceptionMap() map[int64]string {
	if x != nil {
		return x.ExceptionMap
	}
	return nil
}

func (x *LogSketchProto) GetExceptionCounts() map[int64]int64 {
	if x != nil {
		return x.ExceptionCounts
	}
	return nil
}

// Wrapper for a list of log sketches to emit in a single batch
type LogSketchList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketches      []*LogSketchProto      `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches,omitempty"`
	CustomerId    string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogSketchList) Reset() {
	*x = LogSketchList{}
	mi := &file_logsketch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogSketchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSketchList) ProtoMessage() {}

func (x *LogSketchList) ProtoReflect() protoreflect.Message {
	mi := &file_logsketch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSketchList.ProtoReflect.Descriptor instead.
func (*LogSketchList) Descriptor() ([]byte, []int) {
	return file_logsketch_proto_rawDescGZIP(), []int{1}
}

func (x *LogSketchList) GetSketches() []*LogSketchProto {
	if x != nil {
		return x.Sketches
	}
	return nil
}

func (x *LogSketchList) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

var File_logsketch_proto protoreflect.FileDescriptor

const file_logsketch_proto_rawDesc = "" +
	"\n" +
	"\x0flogsketch.proto\x12\x05chqpb\"\xc0\x04\n" +
	"\x0eLogSketchProto\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12%\n" +
	"\x0enamespace_name\x18\x02 \x01(\tR\rnamespaceName\x12!\n" +
	"\fcluster_name\x18\x03 \x01(\tR\vclusterName\x12\x10\n" +
	"\x03tid\x18\x04 \x01(\tR\x03tid\x12\x1a\n" +
	"\binterval\x18\x05 \x01(\x03R\binterval\x12\x1f\n" +
	"\vtotal_count\x18\x06 \x01(\x03R\n" +
	"totalCount\x12\x1f\n" +
	"\verror_count\x18\a \x01(\x03R\n" +
	"errorCount\x12'\n" +
	"\x0fexception_count\x18\b \x01(\x03R\x0eexceptionCount\x12L\n" +
	"\rexception_map\x18\t \x03(\v2'.chqpb.LogSketchProto.ExceptionMapEntryR\fexceptionMap\x12U\n" +
	"\x10exception_counts\x18\n" +
	" \x03(\v2*.chqpb.LogSketchProto.ExceptionCountsEntryR\x0fexceptionCounts\x1a?\n" +
	"\x11ExceptionMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aB\n" +
	"\x14ExceptionCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"c\n" +
	"\rLogSketchList\x121\n" +
	"\bsketches\x18\x01 \x03(\v2\x15.chqpb.LogSketchProtoR\bsketches\x12\x1f\n" +
	"\vcustomer_id\x18\x02 \x01(\tR\n" +
	"customerIdB\tZ\a.;chqpbb\x06proto3"

var (
	file_logsketch_proto_rawDescOnce sync.Once
	file_logsketch_proto_rawDescData []byte
)

func file_logsketch_proto_rawDescGZIP() []byte {
	file_logsketch_proto_rawDescOnce.Do(func() {
		file_logsketch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_logsketch_proto_rawDesc), len(file_logsketch_proto_rawDesc)))
	})
	return file_logsketch_proto_rawDescData
}

var file_logsketch_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_logsketch_proto_goTypes = []any{
	(*LogSketchProto)(nil), // 0: chqpb.LogSketchProto
	(*LogSketchList)(nil),  // 1: chqpb.LogSketchList
	nil,                    // 2: chqpb.LogSketchProto.ExceptionMapEntry
	nil,                    // 3: chqpb.LogSketchProto.ExceptionCountsEntry
}
var file_logsketch_proto_depIdxs = []int32{
	2, // 0: chqpb.LogSketchProto.exception_map:type_name -> chqpb.LogSketchProto.ExceptionMapEntry
	3, // 1: chqpb.LogSketchProto.exception_counts:type_name -> chqpb.LogSketchProto.ExceptionCountsEntry
	0, // 2: chqpb.LogSketchList.sketches:type_name -> chqpb.LogSketchProto
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_logsketch_proto_init() }
func file_logsketch_proto_init() {
	if File_logsketch_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_logsketch_proto_rawDesc), len(file_logsketch_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logsketch_proto_goTypes,
		DependencyIndexes: file_logsketch_proto_depIdxs,
		MessageInfos:      file_logsketch_proto_msgTypes,
	}.Build()
	File_logsketch_proto = out.File
	file_logsketch_proto_goTypes = nil
	file_logsketch_proto_depIdxs = nil
}
