// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: logcounts.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceLogCountProto struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ServiceName         string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	NamespaceName       string                 `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ClusterName         string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Tid                 string                 `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`
	Interval            int64                  `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	CountsByFingerprint map[int64]int64        `protobuf:"bytes,11,rep,name=countsByFingerprint,proto3" json:"countsByFingerprint,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LevelByFingerprint  map[int64]string       `protobuf:"bytes,12,rep,name=levelByFingerprint,proto3" json:"levelByFingerprint,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ServiceLogCountProto) Reset() {
	*x = ServiceLogCountProto{}
	mi := &file_logcounts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLogCountProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLogCountProto) ProtoMessage() {}

func (x *ServiceLogCountProto) ProtoReflect() protoreflect.Message {
	mi := &file_logcounts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLogCountProto.ProtoReflect.Descriptor instead.
func (*ServiceLogCountProto) Descriptor() ([]byte, []int) {
	return file_logcounts_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceLogCountProto) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceLogCountProto) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ServiceLogCountProto) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ServiceLogCountProto) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *ServiceLogCountProto) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ServiceLogCountProto) GetCountsByFingerprint() map[int64]int64 {
	if x != nil {
		return x.CountsByFingerprint
	}
	return nil
}

func (x *ServiceLogCountProto) GetLevelByFingerprint() map[int64]string {
	if x != nil {
		return x.LevelByFingerprint
	}
	return nil
}

// Wrapper for a list of log counts to emit in a single batch
type ServiceLogCountList struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Sketches      []*ServiceLogCountProto `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches,omitempty"`
	CustomerId    string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceLogCountList) Reset() {
	*x = ServiceLogCountList{}
	mi := &file_logcounts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLogCountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLogCountList) ProtoMessage() {}

func (x *ServiceLogCountList) ProtoReflect() protoreflect.Message {
	mi := &file_logcounts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLogCountList.ProtoReflect.Descriptor instead.
func (*ServiceLogCountList) Descriptor() ([]byte, []int) {
	return file_logcounts_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceLogCountList) GetSketches() []*ServiceLogCountProto {
	if x != nil {
		return x.Sketches
	}
	return nil
}

func (x *ServiceLogCountList) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

var File_logcounts_proto protoreflect.FileDescriptor

const file_logcounts_proto_rawDesc = "" +
	"\n" +
	"\x0flogcounts.proto\x12\x05chqpb\"\x8d\x04\n" +
	"\x14ServiceLogCountProto\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12%\n" +
	"\x0enamespace_name\x18\x02 \x01(\tR\rnamespaceName\x12!\n" +
	"\fcluster_name\x18\x03 \x01(\tR\vclusterName\x12\x10\n" +
	"\x03tid\x18\x04 \x01(\tR\x03tid\x12\x1a\n" +
	"\binterval\x18\x05 \x01(\x03R\binterval\x12f\n" +
	"\x13countsByFingerprint\x18\v \x03(\v24.chqpb.ServiceLogCountProto.CountsByFingerprintEntryR\x13countsByFingerprint\x12c\n" +
	"\x12levelByFingerprint\x18\f \x03(\v23.chqpb.ServiceLogCountProto.LevelByFingerprintEntryR\x12levelByFingerprint\x1aF\n" +
	"\x18CountsByFingerprintEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aE\n" +
	"\x17LevelByFingerprintEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"o\n" +
	"\x13ServiceLogCountList\x127\n" +
	"\bsketches\x18\x01 \x03(\v2\x1b.chqpb.ServiceLogCountProtoR\bsketches\x12\x1f\n" +
	"\vcustomer_id\x18\x02 \x01(\tR\n" +
	"customerIdB\tZ\a.;chqpbb\x06proto3"

var (
	file_logcounts_proto_rawDescOnce sync.Once
	file_logcounts_proto_rawDescData []byte
)

func file_logcounts_proto_rawDescGZIP() []byte {
	file_logcounts_proto_rawDescOnce.Do(func() {
		file_logcounts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_logcounts_proto_rawDesc), len(file_logcounts_proto_rawDesc)))
	})
	return file_logcounts_proto_rawDescData
}

var file_logcounts_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_logcounts_proto_goTypes = []any{
	(*ServiceLogCountProto)(nil), // 0: chqpb.ServiceLogCountProto
	(*ServiceLogCountList)(nil),  // 1: chqpb.ServiceLogCountList
	nil,                          // 2: chqpb.ServiceLogCountProto.CountsByFingerprintEntry
	nil,                          // 3: chqpb.ServiceLogCountProto.LevelByFingerprintEntry
}
var file_logcounts_proto_depIdxs = []int32{
	2, // 0: chqpb.ServiceLogCountProto.countsByFingerprint:type_name -> chqpb.ServiceLogCountProto.CountsByFingerprintEntry
	3, // 1: chqpb.ServiceLogCountProto.levelByFingerprint:type_name -> chqpb.ServiceLogCountProto.LevelByFingerprintEntry
	0, // 2: chqpb.ServiceLogCountList.sketches:type_name -> chqpb.ServiceLogCountProto
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_logcounts_proto_init() }
func file_logcounts_proto_init() {
	if File_logcounts_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_logcounts_proto_rawDesc), len(file_logcounts_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logcounts_proto_goTypes,
		DependencyIndexes: file_logcounts_proto_depIdxs,
		MessageInfos:      file_logcounts_proto_msgTypes,
	}.Build()
	File_logcounts_proto = out.File
	file_logcounts_proto_goTypes = nil
	file_logcounts_proto_depIdxs = nil
}
