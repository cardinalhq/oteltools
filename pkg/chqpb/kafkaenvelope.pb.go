// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: kafkaenvelope.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KafkaEnvelopePublishType int32

const (
	KafkaEnvelopePublishType_PUBLISH_TYPE_SPAN_STATS            KafkaEnvelopePublishType = 0
	KafkaEnvelopePublishType_PUBLISH_TYPE_SKETCHES              KafkaEnvelopePublishType = 1
	KafkaEnvelopePublishType_PUBLISH_TYPE_METADATA              KafkaEnvelopePublishType = 2
	KafkaEnvelopePublishType_PUBLISH_TYPE_CHECK_RUN             KafkaEnvelopePublishType = 3
	KafkaEnvelopePublishType_PUBLISH_TYPE_INTAKE_DATADOG        KafkaEnvelopePublishType = 4
	KafkaEnvelopePublishType_PUBLISH_TYPE_INTAKE_CARDINAL       KafkaEnvelopePublishType = 5
	KafkaEnvelopePublishType_PUBLISH_TYPE_METRICS               KafkaEnvelopePublishType = 6
	KafkaEnvelopePublishType_PUBLISH_TYPE_LOGS                  KafkaEnvelopePublishType = 7
	KafkaEnvelopePublishType_PUBLISH_TYPE_TRACES                KafkaEnvelopePublishType = 8
	KafkaEnvelopePublishType_PUBLISH_TYPE_METRICS_V2            KafkaEnvelopePublishType = 9
	KafkaEnvelopePublishType_PUBLISH_TYPE_OTEL_LOGS             KafkaEnvelopePublishType = 10
	KafkaEnvelopePublishType_PUBLISH_TYPE_SPAN_METADATA_STATS   KafkaEnvelopePublishType = 11
	KafkaEnvelopePublishType_PUBLISH_TYPE_METRIC_METADATA_STATS KafkaEnvelopePublishType = 12
	KafkaEnvelopePublishType_PUBLISH_TYPE_LOG_METADATA_STATS    KafkaEnvelopePublishType = 13
	KafkaEnvelopePublishType_PUBLISH_TYPE_METRICS_V2_JSON       KafkaEnvelopePublishType = 14
)

// Enum value maps for KafkaEnvelopePublishType.
var (
	KafkaEnvelopePublishType_name = map[int32]string{
		0:  "PUBLISH_TYPE_SPAN_STATS",
		1:  "PUBLISH_TYPE_SKETCHES",
		2:  "PUBLISH_TYPE_METADATA",
		3:  "PUBLISH_TYPE_CHECK_RUN",
		4:  "PUBLISH_TYPE_INTAKE_DATADOG",
		5:  "PUBLISH_TYPE_INTAKE_CARDINAL",
		6:  "PUBLISH_TYPE_METRICS",
		7:  "PUBLISH_TYPE_LOGS",
		8:  "PUBLISH_TYPE_TRACES",
		9:  "PUBLISH_TYPE_METRICS_V2",
		10: "PUBLISH_TYPE_OTEL_LOGS",
		11: "PUBLISH_TYPE_SPAN_METADATA_STATS",
		12: "PUBLISH_TYPE_METRIC_METADATA_STATS",
		13: "PUBLISH_TYPE_LOG_METADATA_STATS",
		14: "PUBLISH_TYPE_METRICS_V2_JSON",
	}
	KafkaEnvelopePublishType_value = map[string]int32{
		"PUBLISH_TYPE_SPAN_STATS":            0,
		"PUBLISH_TYPE_SKETCHES":              1,
		"PUBLISH_TYPE_METADATA":              2,
		"PUBLISH_TYPE_CHECK_RUN":             3,
		"PUBLISH_TYPE_INTAKE_DATADOG":        4,
		"PUBLISH_TYPE_INTAKE_CARDINAL":       5,
		"PUBLISH_TYPE_METRICS":               6,
		"PUBLISH_TYPE_LOGS":                  7,
		"PUBLISH_TYPE_TRACES":                8,
		"PUBLISH_TYPE_METRICS_V2":            9,
		"PUBLISH_TYPE_OTEL_LOGS":             10,
		"PUBLISH_TYPE_SPAN_METADATA_STATS":   11,
		"PUBLISH_TYPE_METRIC_METADATA_STATS": 12,
		"PUBLISH_TYPE_LOG_METADATA_STATS":    13,
		"PUBLISH_TYPE_METRICS_V2_JSON":       14,
	}
)

func (x KafkaEnvelopePublishType) Enum() *KafkaEnvelopePublishType {
	p := new(KafkaEnvelopePublishType)
	*p = x
	return p
}

func (x KafkaEnvelopePublishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaEnvelopePublishType) Descriptor() protoreflect.EnumDescriptor {
	return file_kafkaenvelope_proto_enumTypes[0].Descriptor()
}

func (KafkaEnvelopePublishType) Type() protoreflect.EnumType {
	return &file_kafkaenvelope_proto_enumTypes[0]
}

func (x KafkaEnvelopePublishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaEnvelopePublishType.Descriptor instead.
func (KafkaEnvelopePublishType) EnumDescriptor() ([]byte, []int) {
	return file_kafkaenvelope_proto_rawDescGZIP(), []int{0}
}

type KafkaEnvelope struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	CustomerId  string                 `protobuf:"bytes,1,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Key         string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	PublishType int32                  `protobuf:"varint,3,opt,name=publishType,proto3" json:"publishType,omitempty"`
	Ts          int64                  `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Payload     []byte                 `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// Types that are valid to be assigned to Partition:
	//
	//	*KafkaEnvelope_PartitionValue
	Partition     isKafkaEnvelope_Partition `protobuf_oneof:"partition"`
	PublishedAt   *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaEnvelope) Reset() {
	*x = KafkaEnvelope{}
	mi := &file_kafkaenvelope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaEnvelope) ProtoMessage() {}

func (x *KafkaEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_kafkaenvelope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaEnvelope.ProtoReflect.Descriptor instead.
func (*KafkaEnvelope) Descriptor() ([]byte, []int) {
	return file_kafkaenvelope_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaEnvelope) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *KafkaEnvelope) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KafkaEnvelope) GetPublishType() int32 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *KafkaEnvelope) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *KafkaEnvelope) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *KafkaEnvelope) GetPartition() isKafkaEnvelope_Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *KafkaEnvelope) GetPartitionValue() int32 {
	if x != nil {
		if x, ok := x.Partition.(*KafkaEnvelope_PartitionValue); ok {
			return x.PartitionValue
		}
	}
	return 0
}

func (x *KafkaEnvelope) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type isKafkaEnvelope_Partition interface {
	isKafkaEnvelope_Partition()
}

type KafkaEnvelope_PartitionValue struct {
	PartitionValue int32 `protobuf:"varint,6,opt,name=partitionValue,proto3,oneof"`
}

func (*KafkaEnvelope_PartitionValue) isKafkaEnvelope_Partition() {}

var File_kafkaenvelope_proto protoreflect.FileDescriptor

const file_kafkaenvelope_proto_rawDesc = "" +
	"\n" +
	"\x13kafkaenvelope.proto\x12\x05chqpb\x1a\x1fgoogle/protobuf/timestamp.proto\"\x82\x02\n" +
	"\rKafkaEnvelope\x12\x1e\n" +
	"\n" +
	"customerId\x18\x01 \x01(\tR\n" +
	"customerId\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12 \n" +
	"\vpublishType\x18\x03 \x01(\x05R\vpublishType\x12\x0e\n" +
	"\x02ts\x18\x04 \x01(\x03R\x02ts\x12\x18\n" +
	"\apayload\x18\x05 \x01(\fR\apayload\x12(\n" +
	"\x0epartitionValue\x18\x06 \x01(\x05H\x00R\x0epartitionValue\x12<\n" +
	"\vpublishedAt\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedAtB\v\n" +
	"\tpartition*\xe4\x03\n" +
	"\x18KafkaEnvelopePublishType\x12\x1b\n" +
	"\x17PUBLISH_TYPE_SPAN_STATS\x10\x00\x12\x19\n" +
	"\x15PUBLISH_TYPE_SKETCHES\x10\x01\x12\x19\n" +
	"\x15PUBLISH_TYPE_METADATA\x10\x02\x12\x1a\n" +
	"\x16PUBLISH_TYPE_CHECK_RUN\x10\x03\x12\x1f\n" +
	"\x1bPUBLISH_TYPE_INTAKE_DATADOG\x10\x04\x12 \n" +
	"\x1cPUBLISH_TYPE_INTAKE_CARDINAL\x10\x05\x12\x18\n" +
	"\x14PUBLISH_TYPE_METRICS\x10\x06\x12\x15\n" +
	"\x11PUBLISH_TYPE_LOGS\x10\a\x12\x17\n" +
	"\x13PUBLISH_TYPE_TRACES\x10\b\x12\x1b\n" +
	"\x17PUBLISH_TYPE_METRICS_V2\x10\t\x12\x1a\n" +
	"\x16PUBLISH_TYPE_OTEL_LOGS\x10\n" +
	"\x12$\n" +
	" PUBLISH_TYPE_SPAN_METADATA_STATS\x10\v\x12&\n" +
	"\"PUBLISH_TYPE_METRIC_METADATA_STATS\x10\f\x12#\n" +
	"\x1fPUBLISH_TYPE_LOG_METADATA_STATS\x10\r\x12 \n" +
	"\x1cPUBLISH_TYPE_METRICS_V2_JSON\x10\x0eB\tZ\a.;chqpbb\x06proto3"

var (
	file_kafkaenvelope_proto_rawDescOnce sync.Once
	file_kafkaenvelope_proto_rawDescData []byte
)

func file_kafkaenvelope_proto_rawDescGZIP() []byte {
	file_kafkaenvelope_proto_rawDescOnce.Do(func() {
		file_kafkaenvelope_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kafkaenvelope_proto_rawDesc), len(file_kafkaenvelope_proto_rawDesc)))
	})
	return file_kafkaenvelope_proto_rawDescData
}

var file_kafkaenvelope_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kafkaenvelope_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_kafkaenvelope_proto_goTypes = []any{
	(KafkaEnvelopePublishType)(0), // 0: chqpb.KafkaEnvelopePublishType
	(*KafkaEnvelope)(nil),         // 1: chqpb.KafkaEnvelope
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_kafkaenvelope_proto_depIdxs = []int32{
	2, // 0: chqpb.KafkaEnvelope.publishedAt:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kafkaenvelope_proto_init() }
func file_kafkaenvelope_proto_init() {
	if File_kafkaenvelope_proto != nil {
		return
	}
	file_kafkaenvelope_proto_msgTypes[0].OneofWrappers = []any{
		(*KafkaEnvelope_PartitionValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kafkaenvelope_proto_rawDesc), len(file_kafkaenvelope_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kafkaenvelope_proto_goTypes,
		DependencyIndexes: file_kafkaenvelope_proto_depIdxs,
		EnumInfos:         file_kafkaenvelope_proto_enumTypes,
		MessageInfos:      file_kafkaenvelope_proto_msgTypes,
	}.Build()
	File_kafkaenvelope_proto = out.File
	file_kafkaenvelope_proto_goTypes = nil
	file_kafkaenvelope_proto_depIdxs = nil
}
