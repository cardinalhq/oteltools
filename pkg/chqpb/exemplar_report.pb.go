// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: exemplar_report.proto

package chqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a single exemplar entry.
type Exemplar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       string                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PartitionId   int64                  `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exemplar) Reset() {
	*x = Exemplar{}
	mi := &file_exemplar_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exemplar) ProtoMessage() {}

func (x *Exemplar) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exemplar.ProtoReflect.Descriptor instead.
func (*Exemplar) Descriptor() ([]byte, []int) {
	return file_exemplar_report_proto_rawDescGZIP(), []int{0}
}

func (x *Exemplar) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Exemplar) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Exemplar) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

// Represents a report containing a batch of exemplars to be published.
type ExemplarPublishReport struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProcessorId    string                 `protobuf:"bytes,2,opt,name=processor_id,json=processorId,proto3" json:"processor_id,omitempty"`
	TelemetryType  string                 `protobuf:"bytes,3,opt,name=telemetry_type,json=telemetryType,proto3" json:"telemetry_type,omitempty"`
	CollectorId    string                 `protobuf:"bytes,4,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
	Exemplars      []*Exemplar            `protobuf:"bytes,5,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExemplarPublishReport) Reset() {
	*x = ExemplarPublishReport{}
	mi := &file_exemplar_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExemplarPublishReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExemplarPublishReport) ProtoMessage() {}

func (x *ExemplarPublishReport) ProtoReflect() protoreflect.Message {
	mi := &file_exemplar_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExemplarPublishReport.ProtoReflect.Descriptor instead.
func (*ExemplarPublishReport) Descriptor() ([]byte, []int) {
	return file_exemplar_report_proto_rawDescGZIP(), []int{1}
}

func (x *ExemplarPublishReport) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ExemplarPublishReport) GetProcessorId() string {
	if x != nil {
		return x.ProcessorId
	}
	return ""
}

func (x *ExemplarPublishReport) GetTelemetryType() string {
	if x != nil {
		return x.TelemetryType
	}
	return ""
}

func (x *ExemplarPublishReport) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *ExemplarPublishReport) GetExemplars() []*Exemplar {
	if x != nil {
		return x.Exemplars
	}
	return nil
}

var File_exemplar_report_proto protoreflect.FileDescriptor

const file_exemplar_report_proto_rawDesc = "" +
	"\n" +
	"\x15exemplar_report.proto\x12\x05chqpb\"\xc7\x01\n" +
	"\bExemplar\x12\x18\n" +
	"\apayload\x18\x01 \x01(\tR\apayload\x12?\n" +
	"\n" +
	"attributes\x18\x02 \x03(\v2\x1f.chqpb.Exemplar.AttributesEntryR\n" +
	"attributes\x12!\n" +
	"\fpartition_id\x18\x03 \x01(\x03R\vpartitionId\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdc\x01\n" +
	"\x15ExemplarPublishReport\x12'\n" +
	"\x0forganization_id\x18\x01 \x01(\tR\x0eorganizationId\x12!\n" +
	"\fprocessor_id\x18\x02 \x01(\tR\vprocessorId\x12%\n" +
	"\x0etelemetry_type\x18\x03 \x01(\tR\rtelemetryType\x12!\n" +
	"\fcollector_id\x18\x04 \x01(\tR\vcollectorId\x12-\n" +
	"\texemplars\x18\x05 \x03(\v2\x0f.chqpb.ExemplarR\texemplarsB\tZ\a.;chqpbb\x06proto3"

var (
	file_exemplar_report_proto_rawDescOnce sync.Once
	file_exemplar_report_proto_rawDescData []byte
)

func file_exemplar_report_proto_rawDescGZIP() []byte {
	file_exemplar_report_proto_rawDescOnce.Do(func() {
		file_exemplar_report_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exemplar_report_proto_rawDesc), len(file_exemplar_report_proto_rawDesc)))
	})
	return file_exemplar_report_proto_rawDescData
}

var file_exemplar_report_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_exemplar_report_proto_goTypes = []any{
	(*Exemplar)(nil),              // 0: chqpb.Exemplar
	(*ExemplarPublishReport)(nil), // 1: chqpb.ExemplarPublishReport
	nil,                           // 2: chqpb.Exemplar.AttributesEntry
}
var file_exemplar_report_proto_depIdxs = []int32{
	2, // 0: chqpb.Exemplar.attributes:type_name -> chqpb.Exemplar.AttributesEntry
	0, // 1: chqpb.ExemplarPublishReport.exemplars:type_name -> chqpb.Exemplar
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_exemplar_report_proto_init() }
func file_exemplar_report_proto_init() {
	if File_exemplar_report_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exemplar_report_proto_rawDesc), len(file_exemplar_report_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exemplar_report_proto_goTypes,
		DependencyIndexes: file_exemplar_report_proto_depIdxs,
		MessageInfos:      file_exemplar_report_proto_msgTypes,
	}.Build()
	File_exemplar_report_proto = out.File
	file_exemplar_report_proto_goTypes = nil
	file_exemplar_report_proto_depIdxs = nil
}
