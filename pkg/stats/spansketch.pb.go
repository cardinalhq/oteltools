// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: spansketch.proto

package stats

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A single span sketch for a metric and timeseries
type SpanSketchProto struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	MetricName string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Tid        string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Interval   int64                  `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// Map of tag key to tag value
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Encoded DDSketch bytes
	Sketch         []byte `protobuf:"bytes,5,opt,name=sketch,proto3" json:"sketch,omitempty"`
	TotalCount     int64  `protobuf:"varint,6,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	ErrorCount     int64  `protobuf:"varint,7,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	ExceptionCount int64  `protobuf:"varint,8,opt,name=exception_count,json=exceptionCount,proto3" json:"exception_count,omitempty"`
	// fingerprint -> exception message
	ExceptionsMap map[int64]string `protobuf:"bytes,9,rep,name=exceptions_map,json=exceptionsMap,proto3" json:"exceptions_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// fingerprint -> exception occurrences
	ExceptionCountsMap map[int64]int64 `protobuf:"bytes,10,rep,name=exception_counts_map,json=exceptionCountsMap,proto3" json:"exception_counts_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SpanSketchProto) Reset() {
	*x = SpanSketchProto{}
	mi := &file_spansketch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanSketchProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanSketchProto) ProtoMessage() {}

func (x *SpanSketchProto) ProtoReflect() protoreflect.Message {
	mi := &file_spansketch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanSketchProto.ProtoReflect.Descriptor instead.
func (*SpanSketchProto) Descriptor() ([]byte, []int) {
	return file_spansketch_proto_rawDescGZIP(), []int{0}
}

func (x *SpanSketchProto) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *SpanSketchProto) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SpanSketchProto) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *SpanSketchProto) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SpanSketchProto) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *SpanSketchProto) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SpanSketchProto) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *SpanSketchProto) GetExceptionCount() int64 {
	if x != nil {
		return x.ExceptionCount
	}
	return 0
}

func (x *SpanSketchProto) GetExceptionsMap() map[int64]string {
	if x != nil {
		return x.ExceptionsMap
	}
	return nil
}

func (x *SpanSketchProto) GetExceptionCountsMap() map[int64]int64 {
	if x != nil {
		return x.ExceptionCountsMap
	}
	return nil
}

// Wrapper for a list of span sketches to emit in a single batch
type SpanSketchList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketches      []*SpanSketchProto     `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches,omitempty"`
	CustomerId    string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanSketchList) Reset() {
	*x = SpanSketchList{}
	mi := &file_spansketch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanSketchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanSketchList) ProtoMessage() {}

func (x *SpanSketchList) ProtoReflect() protoreflect.Message {
	mi := &file_spansketch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanSketchList.ProtoReflect.Descriptor instead.
func (*SpanSketchList) Descriptor() ([]byte, []int) {
	return file_spansketch_proto_rawDescGZIP(), []int{1}
}

func (x *SpanSketchList) GetSketches() []*SpanSketchProto {
	if x != nil {
		return x.Sketches
	}
	return nil
}

func (x *SpanSketchList) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

var File_spansketch_proto protoreflect.FileDescriptor

const file_spansketch_proto_rawDesc = "" +
	"\n" +
	"\x10spansketch.proto\x12\x05stats\"\x8f\x05\n" +
	"\x0fSpanSketchProto\x12\x1f\n" +
	"\vmetric_name\x18\x01 \x01(\tR\n" +
	"metricName\x12\x10\n" +
	"\x03tid\x18\x02 \x01(\tR\x03tid\x12\x1a\n" +
	"\binterval\x18\x03 \x01(\x03R\binterval\x124\n" +
	"\x04tags\x18\x04 \x03(\v2 .stats.SpanSketchProto.TagsEntryR\x04tags\x12\x16\n" +
	"\x06sketch\x18\x05 \x01(\fR\x06sketch\x12\x1f\n" +
	"\vtotal_count\x18\x06 \x01(\x03R\n" +
	"totalCount\x12\x1f\n" +
	"\verror_count\x18\a \x01(\x03R\n" +
	"errorCount\x12'\n" +
	"\x0fexception_count\x18\b \x01(\x03R\x0eexceptionCount\x12P\n" +
	"\x0eexceptions_map\x18\t \x03(\v2).stats.SpanSketchProto.ExceptionsMapEntryR\rexceptionsMap\x12`\n" +
	"\x14exception_counts_map\x18\n" +
	" \x03(\v2..stats.SpanSketchProto.ExceptionCountsMapEntryR\x12exceptionCountsMap\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a@\n" +
	"\x12ExceptionsMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aE\n" +
	"\x17ExceptionCountsMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"e\n" +
	"\x0eSpanSketchList\x122\n" +
	"\bsketches\x18\x01 \x03(\v2\x16.stats.SpanSketchProtoR\bsketches\x12\x1f\n" +
	"\vcustomer_id\x18\x02 \x01(\tR\n" +
	"customerIdB\tZ\a.;statsb\x06proto3"

var (
	file_spansketch_proto_rawDescOnce sync.Once
	file_spansketch_proto_rawDescData []byte
)

func file_spansketch_proto_rawDescGZIP() []byte {
	file_spansketch_proto_rawDescOnce.Do(func() {
		file_spansketch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spansketch_proto_rawDesc), len(file_spansketch_proto_rawDesc)))
	})
	return file_spansketch_proto_rawDescData
}

var file_spansketch_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_spansketch_proto_goTypes = []any{
	(*SpanSketchProto)(nil), // 0: stats.SpanSketchProto
	(*SpanSketchList)(nil),  // 1: stats.SpanSketchList
	nil,                     // 2: stats.SpanSketchProto.TagsEntry
	nil,                     // 3: stats.SpanSketchProto.ExceptionsMapEntry
	nil,                     // 4: stats.SpanSketchProto.ExceptionCountsMapEntry
}
var file_spansketch_proto_depIdxs = []int32{
	2, // 0: stats.SpanSketchProto.tags:type_name -> stats.SpanSketchProto.TagsEntry
	3, // 1: stats.SpanSketchProto.exceptions_map:type_name -> stats.SpanSketchProto.ExceptionsMapEntry
	4, // 2: stats.SpanSketchProto.exception_counts_map:type_name -> stats.SpanSketchProto.ExceptionCountsMapEntry
	0, // 3: stats.SpanSketchList.sketches:type_name -> stats.SpanSketchProto
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spansketch_proto_init() }
func file_spansketch_proto_init() {
	if File_spansketch_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spansketch_proto_rawDesc), len(file_spansketch_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spansketch_proto_goTypes,
		DependencyIndexes: file_spansketch_proto_depIdxs,
		MessageInfos:      file_spansketch_proto_msgTypes,
	}.Build()
	File_spansketch_proto = out.File
	file_spansketch_proto_goTypes = nil
	file_spansketch_proto_depIdxs = nil
}
