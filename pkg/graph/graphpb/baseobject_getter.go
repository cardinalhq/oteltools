// Copyright 2024-2025 CardinalHQ, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by tools/gen_baseobject_getter.go; DO NOT EDIT.

package graphpb

func (po *PackagedObject) GetBaseObject() *BaseObject {
	switch x := po.Object.(type) {
	case *PackagedObject_AppsDaemonSetSummary:
		return x.AppsDaemonSetSummary.BaseObject
	case *PackagedObject_AppsDeploymentSummary:
		return x.AppsDeploymentSummary.BaseObject
	case *PackagedObject_AppsReplicaSetSummary:
		return x.AppsReplicaSetSummary.BaseObject
	case *PackagedObject_AppsStatefulSetSummary:
		return x.AppsStatefulSetSummary.BaseObject
	case *PackagedObject_ConfigMapSummary:
		return x.ConfigMapSummary.BaseObject
	case *PackagedObject_PodSummary:
		return x.PodSummary.BaseObject
	case *PackagedObject_SecretSummary:
		return x.SecretSummary.BaseObject
	default:
		return nil
	}
}

func NewPackagedObject(obj any, rla map[string]string, la map[string]string) *PackagedObject {
	result := &PackagedObject{
		ResourceAttributes: rla,
		RecordAttributes:   la,
	}

	switch s := obj.(type) {
	case *AppsDaemonSetSummary:
		result.Object = &PackagedObject_AppsDaemonSetSummary{ AppsDaemonSetSummary: s }
	case *AppsDeploymentSummary:
		result.Object = &PackagedObject_AppsDeploymentSummary{ AppsDeploymentSummary: s }
	case *AppsReplicaSetSummary:
		result.Object = &PackagedObject_AppsReplicaSetSummary{ AppsReplicaSetSummary: s }
	case *AppsStatefulSetSummary:
		result.Object = &PackagedObject_AppsStatefulSetSummary{ AppsStatefulSetSummary: s }
	case *ConfigMapSummary:
		result.Object = &PackagedObject_ConfigMapSummary{ ConfigMapSummary: s }
	case *PodSummary:
		result.Object = &PackagedObject_PodSummary{ PodSummary: s }
	case *SecretSummary:
		result.Object = &PackagedObject_SecretSummary{ SecretSummary: s }
	}
	return nil
}
